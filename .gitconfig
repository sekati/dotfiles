# @see http://nuclearsquid.com/writings/git-tricks-tips-workflows/
# @see http://stackoverflow.com/questions/2553786/how-do-i-alias-commands-in-git

[user]
	name = John Doe
	email = jd@example.com
	
[github]
	user = johndoe
	token = 12345678901234567890123456789012

[core]
	excludesfile = ~/.gitignore
	editor = vim
	pager=less
	whitespace = fix,space-before-tab,tab-in-indent,trailing-space

[apply]
	whitespace = nowarn
	#whitespace = fix

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
	page = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[push]
	default = tracking
	#default=current

[branch]
	autosetupmerge = true

[merge]
	tool = opendiff

[diff]
	renames = copies

[format]
	pretty="format:%Cred%ae %Creset- %C(yellow)%h %s %Creset(%ar)"

[help]
	autocorrect=1

[log]
	date=short
	
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"	

[alias]

	# BRANCH
	b = branch -v 						# branch verbose
	br = branch -a --color -v 			# show all branches, even across remotes		
	branches = br
	
	
	# CLONE
	cl = clone 							# clone
	clone-shallow = clone --depth 1 	# shallow clone a repository, because we don't care about history	
	
	
	# COMMIT
	ci = commit 						# commit
	c = commit -m 						# commit with message
	ca = commit -am 					# commit all with message
	amend = commit --amend 				# amend your last commit
	#amend = commit --amend -C HEAD 	# amend to the last commit
	fix = commit -am "fix" 				# "fix" commit


	# CHECKOUT
	co = checkout 						# checkout
	nb = checkout -b 					# create and switch to a new branch (mnemonic: "git new branch branchname...")

	
	# CHERRY PICK
	cp = cherry-pick -x 				# grab a change from a branch
	

	# DIFF
	df = diff 							# diff
	dc = diff --cached 					# diff staged changes
	last = diff HEAD^ 					# diff last committed change
	unpushed-diff = diff origin/master..HEAD # show files committed by not pushed
	
	# LOG
	log = log --decorate --graph --date=short
	l = log
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	changelog = log --pretty=format:\" * %s\"
	shortnocolor = log --pretty=format:\"%h %cr %cn %s\"	
	h = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	hist = h
	history = h
	unpushed = log origin/master..HEAD 	# show files committed but not yet pushed
	nonpushed = unpushed
	
	# PULL
	pl = pull 							# pull
	
	
	# PUSH
	ps = push							# push
	push-tags = push origin master --tags
	
	
	# REBASE
	rc = rebase --continue 				# continue rebase
	rs = rebase --skip 					# skip rebase
	ri = rebase --interactive --autosquash	# interactive rebase
	
	
	# REMOTE
	r = remote -v 						# show remotes (verbose)
	
	
	# RESET
	unstage = reset HEAD 				# remove files from index (tracking)
	uncommit = reset --soft HEAD^ 		# go back before last commit, with files in uncommitted state
	filelog = log -u 					# show changes to a file
	mt = mergetool 						# fire up the merge tool
	
	
	# STASH
	ss = stash 							# stash changes
	sl = stash list 					# list stashes
	sa = stash apply 					# apply stash (restore changes)
	sd = stash drop 					# drop stashes (destory changes)	
  	
  	
	# STATUS
	s = status 							# status
	st = status 						# status
	stat = status 						# status	  	
	
	
	# TAG
	t = tag -n 							# show tags with <n> lines of each tag message
	

	# SVN
	svnr = svn rebase
	svnd = svn dcommit
	svnl = svn log --oneline --show-commit
	
	# track a remote branch
 	track = checkout -t	

	

	
	# remove all local branches included in the current branch
	cleanup = !sh -c 'git branch --merged | grep -E "^[^*]" --exclude "^\\s*master" | xargs -n1 git branch -d'
	

	
	# delete a remote branch
	delete = !sh -c 'git push "$0" :refs/heads/"$1"'	
	
	# remove a file from the index
	unstage = reset HEAD --	


	
	# diff the index against the previous commit
	staged = diff --cached	
		
	# add only part of the commit to index
	addp = add --patch	

	# search through the log
	axe = !sh -c 'git log -S"$0"'
	
	# merge the branch, keeping its commits in their own branch
	fold = merge --no-ff	
	
	# put this branch at a particular ref
	goto = reset --hard	

	# pull changes, show commits since last pull/push
	up = !sh -c 'git pull "$0" HEAD && git log --pretty=format:\"%Cred%ae %Creset- %C(yellow)%s %Creset(%ar)\" HEAD@{1}..'

	# update all remotes, pruning removed tracking branches
	update-remotes = remote update --prune

	# set a tag
	label = tag -a
	
	# tags a release with 'release/YYYY-MM-DD-HH-MM-SS'
	tag-release = !sh -c 'git tag release/`date +%Y/%m/%d/%H%M`'	
	
	# mirror branches (including deletions) and tags
 	mirror = push --mirror	
 	
 	

	# better status
	stat = status -sb
  
	who = shortlog -s --
	l = log --graph --abbrev-commit --date=relative
	h = log --format="%h %ad | %s%d [%an]" --graph --date=short
	rvmaster = push origin HEAD:refs/for/master
	conf = config --global -l
	unadd = reset HEAD 
	