#!/bin/bash
# Sekati: Semantic Version String Manipulator
# @author jason m horwitz | sekati.com
# Copyright (C) 2012 jason m horwitz, Sekat LLC. All Rights Reserved.

NAME="SemVer"
DESC="Manipulate semantical version strings '<major>.<minor>.<patch>' (@see http://semver.org)."
VERSION="1.0.0"

# switch to executing script dir
#SCRIPT="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#cd $DIR

spacer() { 
	echo "" 
}

header() { 
	echo "$NAME v$VERSION" 
}

usage() {
	header
	spacer
	echo "Description: $DESC"
	spacer
	echo "Usage: $0 { -m | -n | -p } { version }"
	spacer
	echo "Available Parameters:"
	echo "[ -m --major ] major version increment."
	echo "[ -n --minor ] minor version increment."
	echo "[ -p --patch ] patch version increment."		
	echo "[ -h --help  ] script usage."
	spacer
}

die() { 
	echo $@
	exit 1
}

vmajor() {
	VOUT=`echo $VIN | ( IFS=".$IFS" ; read a b c && echo $((a + 1 ))."0"."0" )`
	#VOUT=`echo $VIN | ( IFS=".$IFS" ; read a b c && echo $((a + 1 )).$b.$c )`
}

vminor() {
	VOUT=`echo $VIN | ( IFS=".$IFS" ; read a b c && echo $a.$((b + 1))."0" )`
	#VOUT=`echo $VIN | ( IFS=".$IFS" ; read a b c && echo $a.$((b + 1)).$c )`
}

vpatch() {
	VOUT=`echo $VIN | ( IFS=".$IFS" ; read a b c && echo $a.$b.$((c + 1)) )`
}

VIN="$BASH_ARGV"
if test -z "$BASH_ARGV"; then
	spacer
	echo "Missing Version String Argument!"
	spacer
	usage
fi

while getopts "pmnh(-help)" flag
do
	#echo "$flag" $OPTIND $OPTARG
	case $flag in

		h|-help)
		usage
		break;
		;;

		m)
		#echo "Major"
		vmajor
		die $VOUT
		break;
		;;
		
		n)
		#echo "Minor"
		vminor
		die $VOUT
		break;
		;;

		p)
		#echo "Patch"
		vpatch
		die $VOUT
		;;
		
	esac
done

# Default to patch if version was passed without trigger
if test -z "$BASH_ARGV"; then
	exit 0
else	
	vpatch
	die $VOUT
fi

exit 1